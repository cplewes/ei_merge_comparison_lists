--- /home/cplewes/dev/ei_merge_comparison_lists/original/added/src/com/agfa/ris/client/studylist/lta/added/searchscreen/ComparisonStudySearchAreaController.java	2025-09-17 14:25:38.999865582 -0600
+++ /home/cplewes/dev/ei_merge_comparison_lists/src/added/java/com/agfa/ris/client/studylist/lta/added/searchscreen/ComparisonStudySearchAreaController.java	2025-09-19 10:35:00.312679556 -0600
@@ -1,116 +1,124 @@
-package com.agfa.ris.client.studylist.lta.added.searchscreen;
-
-import com.agfa.hap.ext.Assert;
-import com.agfa.hap.ext.tableconfig.TableConfigSetupService;
-import com.agfa.ris.client.domainmodel.ris.IAttachmentOwner;
-import com.agfa.ris.client.domainmodel.ris.RequestedProcedure;
-import com.agfa.ris.client.domainmodel.ris.SearchLocation;
-import com.agfa.ris.client.lta.actions.GuestCacheCheckerUtil;
-import com.agfa.ris.client.lta.listarea.controller.SearchLocationManager;
-import com.agfa.ris.client.lta.textarea.event.Add2ComparisonStudiesEvent;
-import com.agfa.ris.client.platform.sdo.DataAccessServiceWithCaching;
-import com.agfa.ris.client.platform.ui.cycling.SelectedPriorSelectClauseProxy;
-import com.agfa.ris.client.studylist.lta.added.AddedComparisonStudiesList;
-import com.agfa.ris.client.studylist.lta.added.searchscreen.AbstractComparisonSearchAreaController;
-import com.agfa.ris.client.studylist.lta.added.searchscreen.ComparisonStudySearchModel;
-import com.agfa.ris.common.workschema.ListContentType;
-import java.util.List;
-import java.util.Objects;
-import java.util.concurrent.atomic.AtomicReference;
-import java.util.function.Function;
-
-public class ComparisonStudySearchAreaController
-extends AbstractComparisonSearchAreaController<RequestedProcedure> {
-    private static final String TOP_TOOLBAR_ID = "comparison.studies";
-    private static final String COMPARISON_STUDIES_SEARCH_DEFINITION = "_comparison_study_search";
-    public static final String identifier = "comparison.study.searcharea";
-    protected ComparisonStudySearchModel<RequestedProcedure> searchModel;
-    private AddedComparisonStudiesList addedComparisonStudiesList;
-    AtomicReference<Function<Add2ComparisonStudiesEvent, Boolean>> callback = new AtomicReference();
-
-    @Override
-    public ComparisonStudySearchModel<RequestedProcedure> getComparisonStudySearchModel() {
-        return this.searchModel;
-    }
-
-    public ComparisonStudySearchAreaController() {
-        this(identifier);
-    }
-
-    public ComparisonStudySearchAreaController(String identifier) {
-        super(identifier);
-        this.searchModel = new ComparisonStudySearchModel();
-        this.studySearchScreenController.getFilterController().addClearListener(this);
-        this.dicomSearchScreenController.getFilterController().addClearListener(this);
-        this.enterpriseSearchScreenController.getFilterController().addClearListener(this);
-    }
-
-    public void setStudyList(AddedComparisonStudiesList studyList) {
-        this.addedComparisonStudiesList = studyList;
-    }
-
-    public boolean isHasBodyPartsColumnInPlusTab() {
-        List tableConfigItemList = TableConfigSetupService.getAddedComparisonStudiesTableConfigItemList();
-        return tableConfigItemList.stream().anyMatch(tableConfigItem -> "bodyPartList".equals(tableConfigItem.getIdentifier()));
-    }
-
-    @Override
-    protected void initSearchPanel() {
-        this.configTableDefinition("searchRequestedProceduresAndTasks", this.studySearchScreenController);
-        this.configTableDefinition("searchDicomStudies", this.dicomSearchScreenController);
-        this.configTableDefinition("searchEnterpriseSearch", this.enterpriseSearchScreenController);
-        super.initSearchPanel();
-    }
-
-    @Override
-    protected boolean isExclusiveLocation(SearchLocation searchLocation) {
-        if (SearchLocationManager.isTeachingFileLocation(searchLocation)) {
-            return true;
-        }
-        return super.isExclusiveLocation(searchLocation);
-    }
-
-    @Override
-    protected boolean add2ComparisonStudies(boolean needCompareImages) {
-        List selectedStudies = this.searchModel.getSelectedStudies();
-        String providerCode = IAttachmentOwner.getProviderCodeFromList(selectedStudies);
-        GuestCacheCheckerUtil.checkIfGuestCacheRequired(ListContentType.PROCEDURES, selectedStudies);
-        if (!this.searchModel.isExternalMode()) {
-            selectedStudies = DataAccessServiceWithCaching.getInstance("TextArea", providerCode).getCachedList(selectedStudies);
-        }
-        Add2ComparisonStudiesEvent add2ComparisonStudiesEvent = new Add2ComparisonStudiesEvent(selectedStudies, !this.searchModel.isExternalMode(), needCompareImages);
-        boolean result = false;
-        if (Objects.nonNull(this.addedComparisonStudiesList)) {
-            result = this.addedComparisonStudiesList.updateList(add2ComparisonStudiesEvent);
-        }
-        if (result) {
-            this.searchScreensController.getFrontController().clear();
-        }
-        return result;
-    }
-
-    @Override
-    protected String getComparisonSearchAreaIdentifier() {
-        return COMPARISON_STUDIES_SEARCH_DEFINITION;
-    }
-
-    @Override
-    protected String getSelectClause() {
-        return SelectedPriorSelectClauseProxy.getInstance().getRequestedProcedureSelectClause().asCommaSeparatedString();
-    }
-
-    @Override
-    protected String getTopToolbarId() {
-        return TOP_TOOLBAR_ID;
-    }
-
-    protected boolean isExternalMode(String queryIdentifier) {
-        return "searchDicomStudies".equals(queryIdentifier) || "searchEnterpriseSearch".equals(queryIdentifier) || "searchTeachingFiles".equals(queryIdentifier);
-    }
-
-    public void show(Function<Add2ComparisonStudiesEvent, Boolean> callback) {
-        Assert.isEDT();
-        this.callback.set(callback);
-        this.getKey().setVisible(true);
-    }
+package com.agfa.ris.client.studylist.lta.added.searchscreen;
+
+import com.agfa.hap.ext.Assert;
+import com.agfa.hap.ext.mvp.AppContext;
+import com.agfa.hap.ext.mvp.event.GlobalBus;
+import com.agfa.hap.ext.mvp.event.IEvent;
+import com.agfa.hap.ext.tableconfig.TableConfigSetupService;
+import com.agfa.ris.client.domainmodel.ris.IAttachmentOwner;
+import com.agfa.ris.client.domainmodel.ris.RequestedProcedure;
+import com.agfa.ris.client.domainmodel.ris.SearchLocation;
+import com.agfa.ris.client.lta.actions.GuestCacheCheckerUtil;
+import com.agfa.ris.client.lta.listarea.controller.SearchLocationManager;
+import com.agfa.ris.client.lta.textarea.event.Add2ComparisonStudiesEvent;
+import com.agfa.ris.client.platform.sdo.DataAccessServiceWithCaching;
+import com.agfa.ris.client.platform.ui.cycling.SelectedPriorSelectClauseProxy;
+import com.agfa.ris.client.studylist.lta.added.AddedComparisonStudiesList;
+import com.agfa.ris.client.studylist.lta.added.searchscreen.AbstractComparisonSearchAreaController;
+import com.agfa.ris.client.studylist.lta.added.searchscreen.ComparisonStudySearchModel;
+import com.agfa.ris.common.workschema.ListContentType;
+import java.util.List;
+import java.util.Objects;
+import java.util.concurrent.atomic.AtomicReference;
+import java.util.function.Function;
+
+public class ComparisonStudySearchAreaController
+extends AbstractComparisonSearchAreaController<RequestedProcedure> {
+    private static final String TOP_TOOLBAR_ID = "comparison.studies";
+    private static final String COMPARISON_STUDIES_SEARCH_DEFINITION = "_comparison_study_search";
+    public static final String identifier = "comparison.study.searcharea";
+    private static final GlobalBus globalEventBus = AppContext.getCurrentContext().getGlobalEventBus();
+    protected ComparisonStudySearchModel<RequestedProcedure> searchModel;
+    private AddedComparisonStudiesList addedComparisonStudiesList;
+    AtomicReference<Function<Add2ComparisonStudiesEvent, Boolean>> callback = new AtomicReference<Function<Add2ComparisonStudiesEvent, Boolean>>();
+
+    @Override
+    public ComparisonStudySearchModel<RequestedProcedure> getComparisonStudySearchModel() {
+        return this.searchModel;
+    }
+
+    public ComparisonStudySearchAreaController() {
+        this(identifier);
+    }
+
+    public ComparisonStudySearchAreaController(String identifier) {
+        super(identifier);
+        this.searchModel = new ComparisonStudySearchModel<RequestedProcedure>();
+        this.studySearchScreenController.getFilterController().addClearListener(this);
+        this.dicomSearchScreenController.getFilterController().addClearListener(this);
+        this.enterpriseSearchScreenController.getFilterController().addClearListener(this);
+    }
+
+    public void setStudyList(AddedComparisonStudiesList studyList) {
+        this.addedComparisonStudiesList = studyList;
+    }
+
+    public boolean isHasBodyPartsColumnInPlusTab() {
+        List tableConfigItemList = TableConfigSetupService.getAddedComparisonStudiesTableConfigItemList();
+        return tableConfigItemList.stream().anyMatch(tableConfigItem -> "bodyPartList".equals(((com.agfa.hap.ext.tableconfig.model.TableConfigItem)tableConfigItem).getIdentifier()));
+    }
+
+    @Override
+    protected void initSearchPanel() {
+        this.configTableDefinition("searchRequestedProceduresAndTasks", this.studySearchScreenController);
+        this.configTableDefinition("searchDicomStudies", this.dicomSearchScreenController);
+        this.configTableDefinition("searchEnterpriseSearch", this.enterpriseSearchScreenController);
+        super.initSearchPanel();
+    }
+
+    @Override
+    protected boolean isExclusiveLocation(SearchLocation searchLocation) {
+        if (SearchLocationManager.isTeachingFileLocation(searchLocation)) {
+            return true;
+        }
+        return super.isExclusiveLocation(searchLocation);
+    }
+
+    @Override
+    protected boolean add2ComparisonStudies(boolean needCompareImages) {
+        List<RequestedProcedure> selectedStudies = this.searchModel.getSelectedStudies();
+        String providerCode = IAttachmentOwner.getProviderCodeFromList(selectedStudies);
+        GuestCacheCheckerUtil.checkIfGuestCacheRequired(ListContentType.PROCEDURES, selectedStudies);
+        if (!this.searchModel.isExternalMode()) {
+            selectedStudies = DataAccessServiceWithCaching.getInstance("TextArea", providerCode).getCachedList(selectedStudies);
+        }
+        Add2ComparisonStudiesEvent add2ComparisonStudiesEvent = new Add2ComparisonStudiesEvent(selectedStudies, !this.searchModel.isExternalMode(), needCompareImages);
+        boolean result = false;
+        if (Objects.nonNull(this.addedComparisonStudiesList)) {
+            result = this.addedComparisonStudiesList.updateList(add2ComparisonStudiesEvent);
+        }
+
+        // Send event globally for blending functionality
+        globalEventBus.sendEvent((IEvent)add2ComparisonStudiesEvent);
+
+        if (result) {
+            this.searchScreensController.getFrontController().clear();
+        }
+        return result;
+    }
+
+    @Override
+    protected String getComparisonSearchAreaIdentifier() {
+        return COMPARISON_STUDIES_SEARCH_DEFINITION;
+    }
+
+    @Override
+    protected String getSelectClause() {
+        return SelectedPriorSelectClauseProxy.getInstance().getRequestedProcedureSelectClause().asCommaSeparatedString();
+    }
+
+    @Override
+    protected String getTopToolbarId() {
+        return TOP_TOOLBAR_ID;
+    }
+
+    protected boolean isExternalMode(String queryIdentifier) {
+        return "searchDicomStudies".equals(queryIdentifier) || "searchEnterpriseSearch".equals(queryIdentifier) || "searchTeachingFiles".equals(queryIdentifier);
+    }
+
+    public void show(Function<Add2ComparisonStudiesEvent, Boolean> callback) {
+        Assert.isEDT();
+        this.callback.set(callback);
+        this.getKey().setVisible(true);
+    }
 }
\ No newline at end of file
